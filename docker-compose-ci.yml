version: "3"
# runs the entire refiner pipeline with all supporting services (including refiner) in docker
# set .env such that all services in docker are talking to each other only
services:
  eth-node:
    image: "us-docker.pkg.dev/covalent-project/network/cqt-staking:stable"
    container_name: hardhat-node
    restart: on-failure
    expose:
      - "8545:8545"
    entrypoint: |
      /bin/bash -l -c "
      echo "forked-node-address:" $ERIGON_NODE;
      ./entrypoint.sh;"
    networks:
      - cqt-net
    environment:
      - ERIGON_NODE=${ERIGON_NODE}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
    ports:
      - "8545:8545"

  cqt-staking:
    image: "us-docker.pkg.dev/covalent-project/network/cqt-staking:stable"
    container_name: proof-chain
    restart: on-failure
    entrypoint: |
      /bin/bash -l -c "
      echo Waiting for hardhat-node to start up...;
      sleep 20;
      echo hard-hat node started!;
      echo "web3-jwt:" $WEB3_JWT;
      npm run docker:deploy;
      nc -v refiner 8008;
      sleep 1000000;"
    depends_on:
      - eth-node
    networks:
      - cqt-net
    ports:
      - "8008:8008"

  ewm-das:
    image: "us-docker.pkg.dev/covalent-project/network/ewm-das:latest"
    volumes:
      - ~/.ipfs:/root/.ipfs/
    container_name: ewm-das
    restart: on-failure
    entrypoint: |
      /bin/bash -l -c "
        touch proof_out_hex.txt;
        chmod +x proof_out_hex.txt;
        echo "$PROOF_OUT_HEX" > proof_out_hex.txt;
        xxd -r -p proof_out_hex.txt > proof_from_hex.out;
        chmod +x proof_from_hex.out;
        mv ./proof_from_hex.out /root/.ipfs/proof_from_hex.out;
        ./usr/local/bin/pinner --addr :5080 --w3-agent-key $W3_AGENT_KEY --w3-delegation-proof-path $W3_DELEGATION_FILE;"
    expose:
      - "4001:4001"
      - "3001:3001"
      - "5080:5080"
    environment:
      - W3_AGENT_KEY=${W3_AGENT_KEY}
      - W3_DELEGATION_FILE=${W3_DELEGATION_FILE}
      - PROOF_OUT_HEX=${PROOF_OUT_HEX}
    networks:
      - cqt-net
    ports:
      - "4001:4001"
      - "3001:3001"
      - "5080:5080"

  evm-server:
    image: "us-docker.pkg.dev/covalent-project/network/evm-server:latest"
    container_name: evm-server
    restart: on-failure
    expose:
      - "3002:3002"
    networks:
      - cqt-net
    ports:
      - "3002:3002"

  refiner:
    image: "us-docker.pkg.dev/covalent-project/network/refiner:latest"
    container_name: refiner
    links:
      - "ewm-das:ewm-das"
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    restart: on-failure
    depends_on:
      ewm-das:
        condition: service_healthy
      evm-server:
        condition: service_healthy
    entrypoint: >
      /bin/bash -l -c "
        echo "ewm-das-address:" $IPFS_PINNER_URL;
        echo "hardhat-node-address:" $NODE_ETHEREUM_MAINNET;
        echo "brp-op-pk:" $BLOCK_RESULT_OPERATOR_PRIVATE_KEY;
        echo "evm-server-address:" $EVM_SERVER_URL;
        echo "code-test-coverage:" $CODECOV_TOKEN;
        echo Waiting for proof-chain to be deployed...;
        while ! nc -l -p 8008;
        do
        sleep 1;
        done;
        echo Proof-chain contracts deployed!;
        echo Uploading test files to local .ipfs...;
        curl -F "filedata=@/app/mix/test-data/codec-0.37/encoded/1-20063050" http://ewm-das:5080/upload;
        curl -F "filedata=@/app/mix/test-data/codec-0.37/encoded/1-20063085" http://ewm-das:5080/upload;
        echo Test bsp files uploaded!;
        cd /mix;
        MIX_ENV=docker mix coveralls.json;
        curl -Os https://uploader.codecov.io/latest/linux/codecov;
        chmod +x codecov;
        ./codecov -t $CODECOV_TOKEN -C $GITHUB_SHA -r $CODECOV_SLUG -B $GITHUB_HEAD_REF; 
        exit 0; "
    environment:
      - NODE_ETHEREUM_MAINNET=${NODE_ETHEREUM_MAINNET}
      - BLOCK_RESULT_OPERATOR_PRIVATE_KEY=${BLOCK_RESULT_OPERATOR_PRIVATE_KEY}
      - EVM_SERVER_URL=${EVM_SERVER_URL}
      - IPFS_PINNER_URL=${IPFS_PINNER_URL}
      - CODECOV_TOKEN=${CODECOV_TOKEN}
      - CI=${CI}
    networks:
      - cqt-net

networks:
  cqt-net:
